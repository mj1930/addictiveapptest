{"version":3,"sources":["./src/$_lazy_route_resource lazy","./src/app/app-routes.ts","./src/app/app.component.css","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/common/common.ts","./src/app/common/password.validator.ts","./src/app/dashboard/dashboard.component.css","./src/app/dashboard/dashboard.component.html","./src/app/dashboard/dashboard.component.ts","./src/app/forget/forget.component.css","./src/app/forget/forget.component.html","./src/app/forget/forget.component.ts","./src/app/forget/forget.service.ts","./src/app/login/login.component.css","./src/app/login/login.component.html","./src/app/login/login.component.ts","./src/app/login/login.service.ts","./src/app/register/register.component.css","./src/app/register/register.component.html","./src/app/register/register.component.ts","./src/app/register/register.service.ts","./src/app/resetpassword/reset-service.service.ts","./src/app/resetpassword/resetpassword.component.css","./src/app/resetpassword/resetpassword.component.html","./src/app/resetpassword/resetpassword.component.ts","./src/app/service/auth-gaurd.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/$$_lazy_route_resource lazy\n// module id = ./src/$$_lazy_route_resource lazy recursive\n// module chunks = main","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HttpModule } from '@angular/http';\nimport { ModuleWithProviders } from '@angular/core';\nimport { RegisterComponent } from './register/register.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { LoginComponent } from './login/login.component';\nimport { AuthGaurdService } from './service/auth-gaurd.service';\nimport { ForgetComponent } from './forget/forget.component';\nimport { ResetpasswordComponent } from './resetpassword/resetpassword.component';\n\nexport const appRoutes: Routes = [\n    {\n        path: '',\n        component: RegisterComponent\n    },\n    {\n        path: 'dashboard',\n        component: DashboardComponent,\n        canActivate: [AuthGaurdService]\n    },\n    {\n        path: 'login',\n        component: LoginComponent\n    },\n    {\n        path: 'forget',\n        component: ForgetComponent\n    },\n    {\n        path: 'reset-password/:token',\n        component: ResetpasswordComponent\n    }\n]\n\nexport const routing: ModuleWithProviders = RouterModule.forRoot(appRoutes, { useHash: true });\n\n\n// WEBPACK FOOTER //\n// ./src/app/app-routes.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.css\n// module id = ./src/app/app.component.css\n// module chunks = main","module.exports = \"<router-outlet></router-outlet>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.html\n// module id = ./src/app/app.component.html\n// module chunks = main","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HttpModule } from '@angular/http';\nimport { HttpClientModule } from '@angular/common/http';\nimport { appRoutes } from './app-routes';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { RegisterComponent } from './register/register.component';\nimport { TextMaskModule } from 'angular2-text-mask';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { LoginComponent } from './login/login.component';\nimport { AuthGaurdService } from './service/auth-gaurd.service';\nimport { ForgetComponent } from './forget/forget.component';\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\nimport { ResetpasswordComponent } from './resetpassword/resetpassword.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    RegisterComponent,\n    DashboardComponent,\n    LoginComponent,\n    ForgetComponent,\n    ResetpasswordComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    HttpClientModule,\n    TextMaskModule,\n    ReactiveFormsModule,\n    RouterModule.forRoot(appRoutes),\n  ],\n  providers: [AuthGaurdService,\n    {\n      provide: LocationStrategy,\n      useClass: HashLocationStrategy\n    }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { FormControl } from '@angular/forms';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nexport const validateEmail = function(c: FormControl) {\n  if (isEmptyInputValue(c.value)) {\n    return null;  // don't validate empty values to allow optional controls\n  }\n\n  let EMAIL_REGEXP = /^([0-9a-zA-Z]([-_\\\\.]*[0-9a-zA-Z]+)*)@([0-9a-zA-Z]([-_\\\\.]*[0-9a-zA-Z]+)*)[\\\\.]([a-zA-Z]{2,9})$/;\n\n  return EMAIL_REGEXP.test(c.value) ? null : {\n    validateEmail: {\n      valid: false\n    }\n  };\n}\n\nexport const validatePhoneNum = function(c: FormControl) {\n  if (isEmptyInputValue(c.value)) {\n    return null;  // don't validate empty values to allow optional controls\n  }\n\n  let REGEXP = /^\\+?[0-9\\(\\)\\-\\.\\ ]{7,20}[0-9]{3}$/;\n\n  return REGEXP.test(c.value) ? null : {\n    validatePhoneNum: {\n      valid: false\n    }\n  };\n}\n\nexport const validateFirstName = function(c: FormControl) {\n  if (isEmptyInputValue(c.value)) {\n    return null;  // don't validate empty values to allow optional controls\n  }\n\n  let REGEXP = /^[a-zA-Z\\.]{2,}[a-zA-Z ]{0,30}$/;\n\n  return REGEXP.test(c.value) ? null : {\n    validateFirstName: {\n      valid: false\n    }\n  };\n}\n\nexport const validatePassword = function(c: FormControl) {\n  if (isEmptyInputValue(c.value)) {\n    return null;  // don't validate empty values to allow optional controls\n  }\n\n  let REGEXP = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*\\(\\)\\-\\_\\=\\+\\{\\}\\[\\]\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\\\\\|\\?])(?=.{8,})/;\n\n  return REGEXP.test(c.value) ? null : {\n    validatePassword: {\n      valid: false\n    }\n  };\n}\n\nexport function matchingPasswords(passwordKey: string, confirmPasswordKey: string) {\n  return (group: FormGroup): {[key: string]: any} => {\n    let password = group.controls[passwordKey];\n    let confirmPassword = group.controls[confirmPasswordKey];\n\n    if (password.value !== confirmPassword.value) {\n      return {\n        mismatchedPasswords: true\n      };\n    }\n  }\n}\n\nexport const validateSlug = function(c: FormControl) {\n  if (isEmptyInputValue(c.value)) {\n    return null;  // don't validate empty values to allow optional controls\n  }\n\n  let REGEXP = /^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$/;\n\n  return REGEXP.test(c.value) ? null : {\n    validateSlug: {\n      valid: false\n    }\n  };\n}\n\nexport const validateMinVal = (min: number) => {\n  return (c: FormControl) => {\n    if (isEmptyInputValue(c.value)) {\n      return null;  // don't validate empty values to allow optional controls\n    }\n\n    let num = +c.value;\n\n    if(isNaN(num) || num < min){\n      return {\n        validateMinVal: {\n          valid: false\n        }\n      }\n    }\n    return null;\n  }\n}\n\nexport const validateMaxVal = (max: number) => {\n  return (c: FormControl) => {\n    if (isEmptyInputValue(c.value)) {\n      return null;  // don't validate empty values to allow optional controls\n    }\n\n    let num = +c.value;\n\n    if(isNaN(num) || num > max){\n      return {\n        validateMaxVal: {\n          valid: false\n        }\n      }\n    }\n    return null;\n  }\n}\n\nexport const validatePassportNum = function(c: FormControl) {\n  if (isEmptyInputValue(c.value)) {\n    return null;  // don't validate empty values to allow optional controls\n  }\n\n  let REGEXP = /[a-zA-Z]{2}[0-9]{7}/;\n\n  return REGEXP.test(c.value) ? null : {\n    validatePassportNum: {\n      valid: false\n    }\n  };\n}\n\nfunction isEmptyInputValue(value: any) {\n  return value == null || typeof value === 'string' && value.length === 0;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/common/common.ts","import {AbstractControl} from '@angular/forms';\nexport class PasswordValidation {\n\n    static MatchPassword(AC: AbstractControl) {\n       let password = AC.get('password').value; // to get value in input tag\n       let confirm_password = AC.get('cpassword').value; // to get value in input tag\n        if(password != confirm_password) {\n            AC.get('cpassword').setErrors( {MatchPassword: true} )\n        } else {\n            return null\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/common/password.validator.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/dashboard/dashboard.component.css\n// module id = ./src/app/dashboard/dashboard.component.css\n// module chunks = main","module.exports = \"<nav class=\\\"navbar navbar-default\\\">\\n  <div class=\\\"container-fluid\\\">\\n    <div class=\\\"navbar-header\\\">\\n      <a class=\\\"navbar-brand\\\">TestApp</a>\\n    </div>\\n    <ul class=\\\"nav navbar-nav\\\">\\n      <li (click)=\\\"logout()\\\"><a href=\\\"#\\\">Logout</a></li>\\n    </ul>\\n  </div>\\n</nav>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/dashboard/dashboard.component.html\n// module id = ./src/app/dashboard/dashboard.component.html\n// module chunks = main","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute, Params, Route } from '@angular/router';\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n  constructor(\n    private _router: Router\n  ) { }\n\n  ngOnInit() {\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/dashboard/dashboard.component.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/forget/forget.component.css\n// module id = ./src/app/forget/forget.component.css\n// module chunks = main","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"row top\\\">\\n    <div class=\\\"col-sm-12\\\">\\n        <h2 >Login Form</h2>\\n    </div>\\n    <form [formGroup]=\\\"resetForm\\\" class=\\\"col-sm-8\\\">\\n      <div class=\\\"form-group col-sm-6\\\">\\n          <label>Email*</label>\\n        <input type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" placeholder=\\\"Email\\\">\\n        <div *ngIf=\\\"resetForm.controls['email'].errors && resetForm.controls['email'].touched\\\" class=\\\"error-msg\\\">\\n          <div [hidden]=\\\"!resetForm.controls['email'].errors.required\\\">You have to fill in email to reset password.</div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group col-sm-6\\\">\\n        <input type=\\\"submit\\\" class=\\\"col-sm-5 btn btn-primary\\\" (click)=\\\"reset()\\\" value=\\\"Reset Password\\\" [disabled]=\\\"!resetForm.valid\\\"/>\\n      </div>\\n    </form>\\n    <div class=\\\"col-sm-12\\\">\\n      <label>Remember password?</label><a routerLink=\\\"/login\\\">Login</a>\\n    </div>\\n  </div>\\n  <div class=\\\"col-sm-12\\\" *ngIf=\\\"sentEmail\\\">\\n    <h3>We have sent you a mail on your registered email. Please check the link to reset password.</h3>\\n  </div>\\n  <div class=\\\"col-sm-12\\\" *ngIf=\\\"msg\\\">\\n    <h3>{{message}}</h3>\\n  </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/forget/forget.component.html\n// module id = ./src/app/forget/forget.component.html\n// module chunks = main","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators as Validators, AbstractControl } from '@angular/forms';\nimport { ForgetService } from './forget.service';\nimport { Router, ActivatedRoute, Params, Route } from '@angular/router';\n\n@Component({\n  selector: 'app-forget',\n  templateUrl: './forget.component.html',\n  styleUrls: ['./forget.component.css'],\n  providers: [ForgetService]\n})\nexport class ForgetComponent implements OnInit {\n\n  resetForm: FormGroup;\n  sentEmail: boolean = false;\n  resetService: Promise<any>;\n  msg: boolean = false;\n  message;\n  constructor(\n    private formBuilder: FormBuilder,\n    private service: ForgetService,\n    private _router: Router\n  ) { }\n\n  ngOnInit() {\n    this.resetForm = this.formBuilder.group({\n      email: ['', Validators.compose([Validators.required])]\n    })\n  }\n\n  reset() {\n    let email = this.resetForm.value.email;\n    this.resetService = this.service.forget(email).then(\n      (res: any) => {\n        if (res.status == 200) {\n          this.sentEmail = true;\n          setTimeout(() => {\n            this._router.navigate(['login']);\n          }, 3000);\n        }\n        else {\n          this.msg = true;\n          this.message = res.msg;\n          setTimeout(() => {\n            this.message = res.msg;\n          }, 2000);\n        }\n      }\n    )\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/forget/forget.component.ts","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Http, Response, RequestOptions } from '@angular/http';\n\nimport { Observable } from 'rxjs/Rx';\nimport { environment } from './../../environments/environment';\n\n@Injectable()\nexport class ForgetService {\n\n  constructor(private _router: Router, private http: Http) { }\n  public BASE_URL: string = environment.config.BASE_URL;\n\n  forget(email) {\n    return this.http.post(`${this.BASE_URL}user/reset-password`, {email}).\n      toPromise().then((res: Response) => res.json());\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/forget/forget.service.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/login/login.component.css\n// module id = ./src/app/login/login.component.css\n// module chunks = main","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"row top\\\">\\n    <div class=\\\"col-sm-12\\\">\\n        <h2 >Login Form</h2>\\n    </div>\\n    <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"login(loginForm.value)\\\" class=\\\"col-sm-8\\\">\\n      <div class=\\\"form-group col-sm-6\\\">\\n          <label>Email*</label>\\n        <input type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" placeholder=\\\"Email\\\">\\n        <div *ngIf=\\\"loginForm.controls['email'].errors && loginForm.controls['email'].touched\\\" class=\\\"error-msg\\\">\\n          <div [hidden]=\\\"!loginForm.controls['email'].errors.required\\\">You have to fill in email to login.</div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group col-sm-6\\\">\\n          <label>Password*</label>\\n        <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"password\\\" placeholder=\\\"Password\\\">\\n        <div *ngIf=\\\"loginForm.controls['password'].errors && loginForm.controls['password'].touched\\\" class=\\\"error-msg\\\">\\n          <div [hidden]=\\\"!loginForm.controls['password'].errors.required\\\">You have to fill in password to login.</div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group col-sm-6\\\">\\n        <input type=\\\"submit\\\" class=\\\"col-sm-2 btn btn-primary\\\" value=\\\"Login\\\" [disabled]=\\\"!loginForm.valid\\\"/>\\n        <label class=\\\"\\\">\\n          Not a user? <a routerLink=\\\"/\\\">Sign up</a>\\n        </label> \\n      </div>\\n    </form>\\n    <div class=\\\"col-sm-12\\\" *ngIf=\\\"invalidLogin\\\">\\n      <h2 class=\\\"error-msg\\\">Invalid Email/password.</h2>\\n    </div>\\n    <div class=\\\"col-sm-12\\\">\\n      <a routerLink=\\\"/forget\\\">Forgot your password?</a>\\n    </div>\\n  </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/login/login.component.html\n// module id = ./src/app/login/login.component.html\n// module chunks = main","import { Component, OnInit, group } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators as Validators, AbstractControl } from '@angular/forms';\nimport { LoginService } from './login.service';\nimport { Router, ActivatedRoute, Params, Route } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n  providers: [LoginService]\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  loginService: Promise<any>;\n  invalidLogin = false;\n  constructor(\n    private formBuilder: FormBuilder,\n    private service: LoginService,\n    private _router: Router\n  ) { }\n\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', Validators.compose([Validators.required])],\n      password: ['', Validators.compose([Validators.required])]\n    })\n  }\n\n  login(value) {\n    this.loginService = this.service.login(value).then(\n      (res: any) => {\n        if (res.status == 200) {\n          localStorage.setItem('token', res.data.token);\n          this._router.navigate(['/dashboard']);\n        }\n        else {\n          this.invalidLogin = true;\n        }\n      }\n    )\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/login/login.component.ts","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Http, Response, RequestOptions } from '@angular/http';\n\nimport { Observable } from 'rxjs/Rx';\nimport { environment } from './../../environments/environment';\n\n@Injectable()\nexport class LoginService {\n\n  constructor(private _router: Router, private http: Http) { }\n  public BASE_URL: string = environment.config.BASE_URL;\n\n  login(userData) {\n    return this.http.post(`${this.BASE_URL}user/login`, {userData}).\n      toPromise().then((res: Response) => res.json());\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/login/login.service.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/register/register.component.css\n// module id = ./src/app/register/register.component.css\n// module chunks = main","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"row top\\\">\\n    <div class=\\\"col-sm-12\\\">\\n        <h2 class=\\\"align-center\\\">Register Form</h2>\\n    </div>\\n    <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"signup(registerForm.value)\\\" class=\\\"col-sm-8\\\">\\n      <div class=\\\"row\\\">\\n          <div class=\\\"form-group col-sm-6\\\">\\n              <label>First Name*</label>\\n            <input type=\\\"text\\\" formControlName= \\\"fname\\\" class=\\\"form-control\\\" placeholder=\\\"First Name\\\">\\n            <div class=\\\"error-msg\\\" *ngIf=\\\"registerForm.controls['fname'].errors && registerForm.controls['fname'].touched\\\">\\n              <div [hidden]=\\\"!registerForm.controls['fname'].errors.required\\\">You have to fill in first name to register.</div>\\n              <div [hidden]=\\\"!registerForm.controls['fname'].errors.minlength\\\">Min 3 characters required.</div>\\n              <div [hidden]=\\\"!registerForm.controls['fname'].errors.maxlength\\\">Max 10 characters allowed.</div>\\n            </div>\\n          </div>\\n          <div class=\\\"form-group col-sm-6\\\">\\n              <label>Last Name*</label>\\n            <input type=\\\"text\\\" formControlName= \\\"lname\\\" class=\\\"form-control\\\" placeholder=\\\"Last Name\\\">\\n            <div *ngIf=\\\"registerForm.controls['lname'].errors && registerForm.controls['lname'].touched\\\" class=\\\"error-msg\\\">\\n              <div [hidden]=\\\"!registerForm.controls['lname'].errors.required\\\">You have to fill in last name to register.</div>\\n              <div [hidden]=\\\"!registerForm.controls['lname'].errors.minlength\\\">Min 3 characters required.</div>\\n              <div [hidden]=\\\"!registerForm.controls['lname'].errors.maxlength\\\">Max 10 characters allowed.</div>\\n            </div>\\n          </div>\\n      </div>\\n      <div class=\\\"row\\\">\\n        <div class=\\\"form-group col-sm-6\\\">\\n            <label>Email*</label>\\n          <input type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" placeholder=\\\"Email\\\">\\n          <div *ngIf=\\\"registerForm.controls['email'].errors && registerForm.controls['email'].touched\\\" class=\\\"error-msg\\\">\\n            <div [hidden]=\\\"!registerForm.controls['email'].errors.required\\\">You have to fill in email to register.</div>\\n            <div [hidden]=\\\"!registerForm.controls['email'].errors.minlength\\\">Min 5 characters required.</div>\\n            <div [hidden]=\\\"!registerForm.controls['email'].errors.maxlength\\\">Max 30 characters allowed.</div>\\n            <div [hidden]=\\\"!registerForm.controls['email'].errors.validateEmail\\\">Invalid email address.</div>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group col-sm-6\\\">\\n            <label>Password*</label>\\n          <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"password\\\" placeholder=\\\"Password\\\">\\n          <div *ngIf=\\\"registerForm.controls['password'].errors && registerForm.controls['password'].touched\\\" class=\\\"error-msg\\\">\\n            <div [hidden]=\\\"!registerForm.controls['password'].errors.required\\\">You have to fill in password to register.</div>\\n            <div [hidden]=\\\"!registerForm.controls['password'].errors.minlength\\\">Min 6 characters required.</div>\\n            <div [hidden]=\\\"!registerForm.controls['password'].errors.maxlength\\\">Max 10 characters allowed.</div>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"row\\\">\\n          <div class=\\\"form-group col-sm-6\\\">\\n              <label>Confirm Password*</label>\\n            <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"cpassword\\\" placeholder=\\\"Confirm Password\\\">\\n            <div *ngIf=\\\"registerForm.controls['cpassword'].errors && registerForm.controls['cpassword'].touched\\\" class=\\\"error-msg\\\">\\n              <div [hidden]=\\\"!registerForm.controls['cpassword'].errors.required\\\">You have to fill in confirm password to register.</div>\\n              <div [hidden]=\\\"!registerForm.controls['cpassword'].errors.MatchPassword\\\">Password mismatch.</div>\\n            </div>\\n          </div>\\n          <div class=\\\"form-group col-sm-6\\\">\\n              <label>Company Name*</label>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"cname\\\" placeholder=\\\"Company Name\\\">\\n            <div *ngIf=\\\"registerForm.controls['cname'].errors && registerForm.controls['cname'].touched\\\" class=\\\"error-msg\\\">\\n              <div [hidden]=\\\"!registerForm.controls['cname'].errors.required\\\">You have to fill in password to register.</div>\\n              <div [hidden]=\\\"!registerForm.controls['cname'].errors.minlength\\\">Min 3 characters required.</div>\\n              <div [hidden]=\\\"!registerForm.controls['cname'].errors.maxlength\\\">Max 10 characters allowed.</div>\\n            </div>\\n          </div>\\n      </div>\\n      <div class=\\\"row\\\">\\n          <div class=\\\"form-group col-sm-6\\\">\\n            <label>Address</label>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"address\\\" placeholder=\\\"Address\\\">\\n            <div *ngIf=\\\"registerForm.controls['address'].errors && registerForm.controls['address'].touched\\\" class=\\\"error-msg\\\">\\n              <div [hidden]=\\\"!registerForm.controls['address'].errors.minlength\\\">Min 5 characters required.</div>\\n              <div [hidden]=\\\"!registerForm.controls['address'].errors.maxlength\\\">Max 20 characters allowed.</div>\\n            </div>\\n          </div>\\n          <div class=\\\"form-group col-sm-6\\\">\\n            <label>Phone No.*</label>\\n            <input type=\\\"text\\\" [textMask]=\\\"{mask: mask}\\\" pattern=\\\"[0-9- ()+]*\\\" class=\\\"form-control\\\" formControlName=\\\"phone\\\" placeholder=\\\"Phone Number\\\">\\n            <div *ngIf=\\\"registerForm.controls['phone'].errors && registerForm.controls['phone'].touched\\\" class=\\\"error-msg\\\">\\n              <div [hidden]=\\\"!registerForm.controls['phone'].errors.required\\\">You have to fill in phone to register.</div>\\n              <div [hidden]=\\\"!registerForm.controls['phone'].errors.minlength\\\">Min 10 characters required.</div>\\n              <div [hidden]=\\\"!registerForm.controls['phone'].errors.maxlength\\\">Max 15 characters allowed.</div>\\n              <div [hidden]=\\\"!registerForm.controls['phone'].errors.pattern\\\">Only numbers are allowed.</div>\\n            </div>\\n          </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <input type=\\\"submit\\\" class=\\\"col-sm-3 btn btn-primary\\\" value=\\\"Register\\\" [disabled]=\\\"!registerForm.valid\\\"/>\\n        Already a user? <a routerLink=\\\"/login\\\">Login</a>\\n      </div>\\n    </form>\\n  </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/register/register.component.html\n// module id = ./src/app/register/register.component.html\n// module chunks = main","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators as Validators, AbstractControl } from '@angular/forms';\nimport { validateEmail } from \"./../common/common\";\nimport { PasswordValidation } from './../common/password.validator';\nimport { RegisterService } from './register.service';\nimport { Router, ActivatedRoute, Params, Route } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css'],\n  providers: [ RegisterService, FormBuilder ]\n})\nexport class RegisterComponent implements OnInit {\n\n  registerForm: FormGroup;\n  register: Promise<any>;\n  mask: any[] = ['+', '9', '1', ' ', '(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/];\n  constructor(\n    private formBuilder: FormBuilder,\n    private service: RegisterService,\n    private zone: NgZone,\n    private _router: Router,\n  ) { }\n\n  ngOnInit() {\n    this.registerForm = this.formBuilder.group({\n      fname: ['', Validators.compose([Validators.required, Validators.minLength(3), Validators.maxLength(10)])],\n      lname: ['', Validators.compose([Validators.required, Validators.minLength(3), Validators.maxLength(10)])],\n      email: ['', Validators.compose([Validators.required, Validators.minLength(3), Validators.maxLength(30), validateEmail])],\n      password: ['', Validators.compose([Validators.required, Validators.minLength(6), Validators.maxLength(10)])],\n      cname: ['', Validators.compose([Validators.required, Validators.minLength(3), Validators.maxLength(10)])],\n      cpassword: ['', Validators.compose([Validators.required])],\n      address: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(20)])],\n      phone: ['', Validators.compose([Validators.required, Validators.minLength(10), Validators.maxLength(18)])]\n    }, {\n      validator: PasswordValidation.MatchPassword\n    })\n  }\n\n  signup(value) {\n    let userDetails = this.registerForm.value;\n    this.register = this.service.register(userDetails).then(\n        (res: any) => {\n          if (res.status == '200') {\n            localStorage.setItem('token', res.data.token);\n            this._router.navigate(['/dashboard']);\n          }\n          else {\n            alert('Email already exist');\n          }\n        }\n    )\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/register/register.component.ts","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Http, Response, RequestOptions } from '@angular/http';\n\nimport { Observable } from 'rxjs/Rx';\nimport { environment } from './../../environments/environment';\n\n@Injectable()\nexport class RegisterService {\n\n  constructor(private _router: Router, private http: Http) { }\n  public BASE_URL: string = environment.config.BASE_URL;\n\n  register(userData) {\n    return this.http.post(`${this.BASE_URL}user/signup`, {userData}).\n      toPromise().then((res: Response) => res.json());\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/register/register.service.ts","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Http, Response, RequestOptions } from '@angular/http';\n\nimport { Observable } from 'rxjs/Rx';\nimport { environment } from './../../environments/environment';\n\n@Injectable()\nexport class ResetServiceService {\n\n  constructor(private _router: Router, private http: Http) { }\n  public BASE_URL: string = environment.config.BASE_URL;\n\n  resetPassword(userData) {\n    return this.http.post(`${this.BASE_URL}user/resetpassword`, {userData}).\n      toPromise().then((res: Response) => res.json());\n  }\n\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/resetpassword/reset-service.service.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/resetpassword/resetpassword.component.css\n// module id = ./src/app/resetpassword/resetpassword.component.css\n// module chunks = main","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"row top\\\">\\n    <div class=\\\"col-sm-12\\\">\\n        <h2 >Reset Password</h2>\\n    </div>\\n    <form [formGroup]=\\\"passForm\\\" (ngSubmit)=\\\"changePassword(passForm.value)\\\" class=\\\"col-sm-8\\\">\\n      <div class=\\\"form-group col-sm-6\\\">\\n          <label>Password*</label>\\n        <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"password\\\" placeholder=\\\"Email\\\">\\n        <div *ngIf=\\\"passForm.controls['password'].errors && passForm.controls['password'].touched\\\" class=\\\"error-msg\\\">\\n          <div [hidden]=\\\"!passForm.controls['password'].errors.required\\\">You have to fill in password to login.</div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group col-sm-6\\\">\\n          <label>Confirm Password*</label>\\n        <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"cpassword\\\" placeholder=\\\"Password\\\">\\n        <div *ngIf=\\\"passForm.controls['cpassword'].errors && passForm.controls['cpassword'].touched\\\" class=\\\"error-msg\\\">\\n          <div [hidden]=\\\"!passForm.controls['cpassword'].errors.required\\\">You have to fill in confirm password to login.</div>\\n          <div [hidden]=\\\"!passForm.controls['cpassword'].errors.MatchPassword\\\">Password mismatch.</div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group col-sm-6\\\">\\n        <input type=\\\"submit\\\" class=\\\"col-sm-4 btn btn-primary\\\" value=\\\"Change Password\\\" [disabled]=\\\"!passForm.valid\\\"/>\\n        <label class=\\\"\\\">\\n          Remember password? <a routerLink=\\\"/login\\\">Sign in</a>\\n        </label> \\n      </div>\\n    </form>\\n    <div class=\\\"col-sm-12\\\" *ngIf=\\\"msg\\\">\\n      <h3>Password changed successfully. Please Login now with new password</h3>\\n    </div>\\n  </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/resetpassword/resetpassword.component.html\n// module id = ./src/app/resetpassword/resetpassword.component.html\n// module chunks = main","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators as Validators, AbstractControl } from '@angular/forms';\nimport { Router, ActivatedRoute, Params, Route } from '@angular/router';\nimport { PasswordValidation } from './../common/password.validator';\nimport { ResetServiceService } from './reset-service.service';\n\n@Component({\n  selector: 'app-resetpassword',\n  templateUrl: './resetpassword.component.html',\n  styleUrls: ['./resetpassword.component.css'],\n  providers: [ResetServiceService]\n})\nexport class ResetpasswordComponent implements OnInit {\n\n  passForm: FormGroup;\n  passService: Promise<any>;\n  paramdata;\n  msg: boolean = false;\n  constructor(\n    private formBuilder: FormBuilder,\n    private _router: Router,\n    private service: ResetServiceService,\n    public activatedRoute: ActivatedRoute,\n  ) { }\n\n  ngOnInit() {\n    this.passForm = this.formBuilder.group({\n      password: ['', Validators.compose([Validators.required])],\n      cpassword: ['', Validators.compose([Validators.required])],\n    }, {\n      validator: PasswordValidation.MatchPassword\n    })\n    this.activatedRoute.params.subscribe((params: Params) => {    \n      this.paramdata = params.token;\n    });\n  }\n\n  changePassword(formValue) {\n    let data = {\n      password: formValue.password,\n      token: this.paramdata\n    }\n    this.passService = this.service.resetPassword(data).then(\n      (res: any) => {\n        if (res.status == 200) {\n          this.msg = true;\n          setTimeout(() => {\n            this._router.navigate(['/login']);\n          })\n        }\n      }\n    )\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/resetpassword/resetpassword.component.ts","import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\n\n@Injectable()\nexport class AuthGaurdService {\n\n  constructor(private router: Router) { }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    if (localStorage.getItem('token')) {\n      return true;\n    }\n    else {\n      this.router.navigate(['/']);\n      return false;\n    }\n  }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/service/auth-gaurd.service.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false,\n  config: {\n    BASE_URL: 'http://localhost:3000/'\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts"],"sourceRoot":"webpack:///"}